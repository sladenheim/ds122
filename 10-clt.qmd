---
title: Central Limit Theorem
author: "CDS DS-122<br>Boston University"
format: 
    revealjs:
        math: true
        css: 
        - styles.css
        html-math-method: mathjax
        highlight-style: github
        slide-number: true
        show-slide-number: all
        chalkboard: true 
---

## CLT: Recap
:::{style="font-size: .8em"}
TThe Central Limit Theorem (CLT) is a foundational result in probability theory. While there are many versions, varying in degrees of abstraction and generality, this is the one we introduced in the last lecture.
```{python}
from IPython.core.display import HTML

def generate_html():
    return r"""
    <div class="purple-box">
     <span class="label"> The Central Limit Theorem (CLT) </span>
        <p>
        Let \(X_1, X_2, ...\) be a sequence of independent and identically distributed random variables, each having mean \(\mu\) and variance \(\sigma^2.\) Let \(S_n = \sum_{i=1}^n X_i.\) Then 

    $$\frac{S_n - n\mu}{\sigma\sqrt{n}}$$

    tends to the standard normal distribution as \(n \to \infty.\)
        </p>
    </div>
    """
html_content = generate_html()
display(HTML(html_content))
```
:::

## Learning Objectives
:::{style="font-size: .8em"}
* Discuss less formal versions of the CLT
* Learn how to use the CLT
* Practice solving CLT questions 
:::

## Classifying Songs
:::{style="font-size: .8em"}
:::{.columns}
::: {.column width="70%"}
A data science student Anush is building a machine learning model to classify music genres from audio files. He has a playlist of 500 songs, each with a variable processing time. The processing times are independent and follow a common distribution with:

- Mean: 3 minutes
- Standard deviation: 0.5 minutes
:::

::: {.column width="30%"}
:::{.center-text}
<img src="images/sums of random variables/Anush.jpeg" width=300/>
:::
:::
:::

<!-- __Question__: What distribution can be used to describe the amount of time that Anush needs to process the first 45 songs? -->
Anush has 140 minutes available before class starts. 

__Question__: Approximate the probability that Anush will be able to process at least 45 songs before class.

:::

## Reformulated CLT 

:::{style="font-size: .8em"}
Loosely put, the CLT tells us the following:

If $X_1,X_2,...,X_n$ are independent random variables with mean $\mu$ and standard deviation $\sigma$, and if $n$ is large, then, $X_1+...+X_n$ is approximately normally distributed with mean $n\mu$ and standard deviation $\sqrt{n}\sigma$.<br>
<br>

Another version of the CLT concerns averages of random variables. This version states that 

If $X_1,X_2,...,X_n$ are independent random variables with mean $\mu$ and standard deviation $\sigma$, and if $n$ is large, then, $\frac{1}{n}(X_1+...+X_n)$ is approximately normally distributed with mean $\mu$ and standard deviation $\frac{Ïƒ}{\sqrt{n}}$.
:::

## Does CLT Always Work?

:::{style="font-size: .8em"}
For practical purposes, the limiting results in itself are not of primary interest to us. We are more interested in their use as an approximation with finite values of $n$. 

It is impossible to give a concise and definitive statement of how good the approximation is for what value of $n$. However, some general guidelines are available. 

_How fast the approximation becomes good depends on the distribution of the summands_, the $X_i$s. 

If the distribution is fairly symmetric and has tails that die off rapidly, the approximation becomes good for relatively small values of $n$. If the distribution is very skewed or if the tails die down very slowly, a larger value of $n$ is needed for a good approximation.
:::

## CLT

:::{style="font-size: .8em"}
__Example__: The CLT tells us that a random variable defined as the sum of a large number of Bernoulli random variables should be approximately normally distributed.

Let us look at the distributions obtained for $p = 0.5$ and different values of $n$, the number of random variables. 

:::{.center-text}
```{python}
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import pandas as pd

def plot_distributions(ns, num_samples=1000, p=0.5):
    plt.figure(figsize=(10, 4))
    for n in ns:
        counts = np.array([sum(np.random.binomial(n=1, p=p, size=n)) for _ in range(num_samples)])
        sns.histplot(pd.DataFrame({"counts": counts}), x="counts", binwidth=1, binrange=[0, max(ns)], label=f'n={n}')
    plt.xlim(0,70)
    plt.yticks(fontsize=18)
    plt.xticks(fontsize=18)
    plt.legend(loc='best', prop={'size': 18})
    #plt.title('Distributions of the sum of n random variables')
    plt.xlabel('Counts', fontsize=18)
    plt.ylabel('Frequency', fontsize=18)
    plt.show()

plot_distributions([10, 40, 100])

```
:::


:::

## Holly Example

:::{style="font-size: .8em"}

:::{.columns}
::: {.column width="30%"}
:::{.center-text}
<img src="images/clt/Holly_sleeping.png" width=300/>
:::
:::

::: {.column width="70%"}
Holly the monkey belongs to a species that is diurnal, meaning they travel and forage during the day and rest at night. On average, Holly sleeps 9.7 hours per day, with a standard deviation of 1.2 hours. The scientists observing Holly concluded that, based on their sound recordings, she slept at most 3602 hours last year. You can assume that there are 365 days in a year.
:::

:::

a. Use the Central Limit Theorem (CLT) to approximate the distribution of the total number of hours that Holly is asleep throughout the year. Clearly state all the parameters of the distribution. 

b. Approximate the probability that Holly slept at most 3602 hours last year based on your answer to part a.

:::


## Holly Example

:::{style="font-size: .8em"}

:::

:::{.notes}
a. According to the CLT, the total number of hours that Holly is asleep throughout the year is normally distributed with mean $365 \cdot 9.7 = 3540.5$ and the standard deviation of $\sqrt{365} \cdot 1.2 \approx 22.93$.\\
b. Let $S$ be a random variable that represents the total number of hours that Holly sleeps in a year. Based on part a, $S$ is normally distributed with mean 3540.5 and standard deviation 22.93. We are interested in $P(S \leq 3602).$ 
$$\begin{align*}
    P(S \leq 3602) = P\left(\frac{S-3540.5}{22.93}  \leq \frac{3602-3540.5}{22.93}\right) = P(Z \leq 2.6821) = 0.99801.
\end{align*}$$
:::

## Classifying Songs
:::{style="font-size: .8em"}
:::{.columns}
::: {.column width="30%"}
:::{.center-text}
<img src="images/sums of random variables/Anush.jpeg" width=300/>
:::
:::

::: {.column width="70%"}

In the last lecture we saw that $S_{45}$ is approximately normally distributed with 
$$\small{E[S_{45}] = E\left[\sum_{i=1}^{45} X_i \right] = 45\cdot 3 = 135,}$$

$$\small{\text{Var}[S_{45}] = \text{Var}\left(\sum_{i=1}^{45} X_i \right) = 45\cdot 0.5^2 = 11.25.}$$

:::
:::
 Then the probability that Anush will be able to process at least 45 songs before class is equal to

$$\small{P(S_{45} \leq 140) = P\left(Z \leq \frac{140 - 135}{\sqrt{11.25}} \right) = P(Z \leq 1.49) \approx 0.9320.} $$
:::

## Group Question 1
:::{style="font-size: .8em"}
```{python}
from IPython.core.display import HTML

def generate_html():
    return r"""
    <div class="blue-box">
        <p>
    An instructor has 50 exams that will be graded in sequence. The times required to grade the 50 exams are independent, with a common distribution that has mean 20 minutes and standard deviation 4 minutes. Approximate the probability that the instructor will grade at least 25 of the exams in the first 450 minutes of work.
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
        </p>
    </div>
    """
html_content = generate_html()
display(HTML(html_content))
```
:::


## Group Question 2
:::{style="font-size: .8em"}
```{python}
from IPython.core.display import HTML

def generate_html():
    return r"""
    <div class="blue-box">
        <p>
    Let \(X_1, X_2, \ldots, X_{10}\) be independent continuous random variables, each uniformly distributed over \([0,1].\) <br>

    a. Use the CLT to approximate the distribution of \(S_{10} = \sum_{i=1}^{10} X_i.\) <br>
    <br>
    <br>
    <br>
    <br>
    <br>
    
    b. Calculate an approximation to \(P(S_{10} > 6).\)
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
     </p>
    </div>
    """
html_content = generate_html()
display(HTML(html_content))
```
:::

## Group Question 3
:::{style="font-size: .8em"}
```{python}
from IPython.core.display import HTML

def generate_html():
    return r"""
    <div class="blue-box">
        <p>
    Suppose that, on average, one third of the graduating seniors at a certain college have two parents attend the graduation ceremony, another third of these seniors have one parent attend the ceremony, and the remaining third of these seniors have no parents attend. If there are 600 graduating seniors in a particular class, what is the approximate probability that between 550 and 650 parents will attend the graduation ceremony? 
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
     </p>
    </div>
    """
html_content = generate_html()
display(HTML(html_content))
```
:::



