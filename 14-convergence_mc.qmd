---
title: Convergence of Markov Chains
author: "CDS DS-122<br>Boston University"
format: 
    revealjs:
        math: true
        css: 
        - styles.css
        html-math-method: mathjax
        highlight-style: github
        slide-number: true
        show-slide-number: all
        chalkboard: true 
---

## Google's PageRank
:::{style="font-size: .8em"}

This time suppose that we have a small Internet consisting of just 5 websites connected as suggested by the figure below.

:::{.center-text}
<img src="images/markov/pagerank_disconnected.png" width=600/>
:::

__Question__:  Is it possible to find a unique PageRank of each website using our old PageRank computation approach? How can we be sure it's possible?

:::

## Learning Objectives

:::{style="font-size: .8em"}
- Communicating states
- Irreducible Markov chains
- Periodic and aperiodic states
- Aperiodic Markov chains
- Regular Markov chains

<!-- - Irreducible Markov chains:
    * Definition of communicating states
    * Definition
    * Properties 
- Aperiodic Markov chains:
    * Definition of a periodic state
    * Definition
    * Properties
- Regular Markov chains -->
<!-- - Convergence of a Markov chain to a unique steady state -->


:::

## Communicating States

:::{style="font-size: .8em"}
```{python}
from IPython.core.display import HTML

def generate_html():
    return r"""
    <div class="purple-box">
     <span class="label">Communicating States</span>
        <p>
        If \(P_{ij} (n) > 0\) for some \(n\), then state \(j\) <b>reaches</b> state \(i\). If state \(j\) reaches state \(i\) and state \(i\) reaches state \(j\), then states \(i\) and \(j\) <b>communicate</b>.
        </p>
    </div>
    """
html_content = generate_html()
display(HTML(html_content))
```
__Notation__: 

- $i \to j$ means that $i$ reaches $j$
- $i \leftrightarrow j$ means that $i$ and $j$ communicate

__Example__: 

:::{.columns}
::: {.column width="40%"}

:::{.center-text}
<img src="images/markov/mc-example-3-new.jpg" width=450/>
::: 

:::
::: {.column width="60%"}
State 0 reaches state 1 and vice versa.
:::
:::
:::
<!-- If a Markov chain has 4 states and transition matrix $\small{P = \begin{bmatrix}  1/3 & 2/3 & 1/4 & 0 \\ 2/3 & 1/3 & 1/4 & 0 \\ 0 & 0 & 1/4 & 0 \\ 0 & 0 & 1/4 & 1 \end{bmatrix}},$ then only two states communicate.<br>
<span style="color:rgb(1, 180, 180);">Can you identify what two states communicate?</span>

:::

:::{.notes}
1 and 2
::: -->

## Irreducible Markov Chains

:::{style="font-size: .8em"}
```{python}
from IPython.core.display import HTML

def generate_html():
    return r"""
    <div class="purple-box">
     <span class="label">Irreducible Markov Chain</span>
        <p>
       If all states of a Markov chain communicate, then the chain is <b>irreducible</b>.
        </p>
    </div>
    """
html_content = generate_html()
display(HTML(html_content))
```

That is, a Markov chain is irreducible if every state can be reached from every other state, possibly in multiple steps.

__Example__: 

:::{.columns}
::: {.column width="40%"}

:::{.center-text}
<img src="images/markov/mc-example-3-new.jpg" width=450/>
:::

:::
::: {.column width="60%"}
This Markov chain is irreducible, because both states can reach each other.

<!-- Its transition matrix is $\small{P = \begin{bmatrix} 0 & 1 \\ 1 & 0 \end{bmatrix}}.$ -->
:::
:::

:::

## Irreducible Markov Chains
:::{style="font-size: .8em"}
```{python}
from IPython.core.display import HTML

def generate_html():
    return r"""
    <div class="blue-box">
        <p>
    If a Markov chain has 4 states and its transition matrix is given by \(\small{P = \begin{bmatrix}  1/3 & 2/3 & 1/4 & 0 \\ 2/3 & 1/3 & 1/4 & 0 \\ 0 & 0 & 1/4 & 0 \\ 0 & 0 & 1/4 & 1 \end{bmatrix}},\) is it irreducible?<br>
    <br>
    <br>
        </p>
    </div>
    """
html_content = generate_html()
display(HTML(html_content))
```
:::
:::{.notes}
No, only the first 2 states communicate.
:::


## The period of a state

:::{style="font-size: .8em"}
```{python}
from IPython.core.display import HTML

def generate_html():
    return r"""
    <div class="purple-box">
     <span class="label">Period of a State</span>
        <p>
       The <b>period</b> \(d\) of state \(i\) is the largest integer for which \(P_{ii}(n) = 0\) whenever \(n\) is NOT divisible by \(d\). 
        </p>
    </div>
    """
html_content = generate_html()
display(HTML(html_content))
```

That is, $P_{ii}(n) > 0$ for ONLY multiples of $d$. So starting at $i$, you only have a chance to revisit $i$ at multiples of $d$ steps.

__Note__: If $P_{ii}(n) = 0$ for all $n,$ (you can never make it back to $i$) then the period is not definied.

:::

## Periodic and aperiodic

:::{style="font-size: .8em"}

```{python}
from IPython.core.display import HTML

def generate_html():
    return r"""
    <div class="purple-box">
     <span class="label">Periodic State</span>
        <p>
       If a state has period greater than 1, \(d > 1\), the state is <b>periodic</b>. 
        </p>
    </div>
    """
html_content = generate_html()
display(HTML(html_content))
```
<br>

```{python}
from IPython.core.display import HTML

def generate_html():
    return r"""
    <div class="purple-box">
     <span class="label">Aperiodic State</span>
        <p>
      If a state has period equal to 1, \(d = 1\), the state is <b>aperiodic</b>. 
        </p>
    </div>
    """
html_content = generate_html()
display(HTML(html_content))
```

__Note__: A Markov chain is aperiodic if every state is aperiodic.
:::

## Example of state periods

:::{style="font-size: .8em"}

- Figure a: both states have period 1 (aperiodic chain) 
- Figure b: both states have period 2 
- Figure c: all states have period 3.


:::{.center-text}
<img src="images/markov/mc-period.jpg" width=600/>
:::

:::

## Periodic and Aperiodic States

:::{style="font-size: .8em"}

```{python}
from IPython.core.display import HTML

def generate_html():
    return r"""
    <div class="purple-box">
        <p>
        Communicating states have the same period. 
        </p>
    </div>
    """
html_content = generate_html()
display(HTML(html_content))
```

:::{.center-text}
<img src="images/markov/mc-period-question.jpg" width=300/>
:::


```{python}
from IPython.core.display import HTML

def generate_html():
    return r"""
    <div class="blue-box">
        <p>
    What is the period of each state of this Markov chain?
        </p>
    </div>
    """
html_content = generate_html()
display(HTML(html_content))
```

:::

:::{.notes}
1
:::

## Regular Markov Chain

:::{style="font-size: .8em"}
```{python}
from IPython.core.display import HTML

def generate_html():
    return r"""
    <div class="purple-box">
     <span class="label">Regular Markov Chain</span>
        <p>
        A Markov chain is a <b>regular</b> Markov chain if some matrix power of the transition matrix \(P^k\) contains only strictly positive entries.  
        </p>
    </div>
    """
html_content = generate_html()
display(HTML(html_content))
```

__Note__: The transition matrix satisfying the above definition is called **primitive**.

:::

## Regular Markov Chain

:::{style="font-size: .8em"}
```{python}
from IPython.core.display import HTML

def generate_html():
    return r"""
    <div class="purple-box">
     <span class="label">Regular Markov Chain</span>
        <p>
        A Markov chain is a <b>regular</b> Markov chain if some matrix power of the transition matrix \(P^k\) contains only strictly positive entries.  
        </p>
    </div>
    """
html_content = generate_html()
display(HTML(html_content))
```

__Note__: The transition matrix satisfying the above definition is called **primitive**.

__Example__: $\small{P =\left[\begin{array}{rrr}.5&.2&.3\\.3&.8&.3\\.2&0&.4\end{array}\right]}$ does not have every entry strictly positive.  

However, $\small{P^2 = \left[\begin{array}{rrr}.37&.26&.33\\.45&.70&.45\\.18&.04&.22\end{array}\right]}$ does. 

Since every entry in $P^2$ is positive, the corresponding Markov chain is a regular (and $\small{P}$ is primitive.)

:::

## Regular Markov Chain

:::{style="font-size: .8em"}
```{python}
from IPython.core.display import HTML

def generate_html():
    return r"""
    <div class="purple-box">
     <span class="label">Regular Markov Chain</span>
        <p>
        A Markov chain is a <b>regular</b> Markov chain if some matrix power of the transition matrix \(P^k\) contains only strictly positive entries.  
        </p>
    </div>
    """
html_content = generate_html()
display(HTML(html_content))
```

Putting it together, we can show that:

```{python}
from IPython.core.display import HTML

def generate_html():
    return r"""
    <div class="purple-box">
        <p>
        If a Markov chain is regular, then it is also irreducible and aperiodic.
<br><br>
        If a Markov chain is irreducible and aperiodic, it is regular
        </p>
    </div>
    """
html_content = generate_html()
display(HTML(html_content))
```
:::


## Markov Chain Convergence

:::{style="font-size: .8em"}
```{python}
from IPython.core.display import HTML

def generate_html():
    return r"""
    <div class="purple-box">
        <p>
        Every <b>regular</b> Markov chain has a unique steady-state distribution \({\boldsymbol{\pi}}.\)  
        <br><br>
        If \({\bf x_0}\) is any initial state distribution and \({\bf x_{k+1}} = P{\bf x_k}\) for \(k = 0, 1, 2,\dots\) then the Markov chain \(\{{\bf x_k}\}\) converges to \({\boldsymbol{\pi}}\) as \(k \rightarrow \infty.\)  
        </p>
    </div>
    """
html_content = generate_html()
display(HTML(html_content))
```
__Example__: Does this Markov chain converge to a unique steady-state distribution?

:::{.center-text}
<img src="images/markov/mc-example-5.jpeg" width=250/>
:::

:::

## Regular Markov Chain

:::{style="font-size: .8em"}
__Example (continued)__: 

The transition matrix contains several zero entries:
$$\small{P = \begin{bmatrix}0.5&0.5&0\\0.5&0&0.5\\0&0.5&0.5\end{bmatrix}.}$$

::: 

## Regular Markov Chain

:::{style="font-size: .8em"}
__Example (continued)__: 

The transition matrix contains several zero entries:
$$\small{P = \begin{bmatrix}0.5&0.5&0\\0.5&0&0.5\\0&0.5&0.5\end{bmatrix}.}$$

However, $P^2$ is strictly positive:

$$\small{P^2 = \begin{bmatrix}0.5&0.5&0\\0.5&0&0.5\\0&0.5&0.5\end{bmatrix} \begin{bmatrix}0.5&0.5&0\\0.5&0&0.5\\0&0.5&0.5\end{bmatrix} = \begin{bmatrix}0.5&0.25&0.25\\0.25&0.5&0.25\\0.25&0.5&0.25\end{bmatrix}.}$$

Hence, the Markov chain is regular. It converges to a unique steady state.
::: 

## Google's PageRank
:::{style="font-size: .8em"}

:::{.columns}
::: {.column width="50%"}
:::{.center-text}
<img src="images/markov/pagerank_disconnected.png" width=500/>
:::
:::

::: {.column width="50%"}
1. The chain is not irreducible:

- States 1 and 2 cannot reach the remaining states 
- States 3, 4, and 5 cannot reach states 1 and 2
:::
:::
2. The chain in not aperiodic (States 1 and 2 have period 2)

3. Hence, this chain is not regular.

4. Since the chain is not regular, there is no guarantee that we can find a unique PageRank vector.


:::

:::{.notes}
States 3, 4, 5 are aperiodic, but that does not matter
:::

## Google's PageRank
:::{style="font-size: .8em"}
Here, $\small{P = \begin{bmatrix} 0 & 1 & 0 & 0 & 0 \\ 1 & 0 & 0 & 0 & 0 \\ 0 & 0 & 0 & 1/2 & 1/2 \\0 & 0 & 1/2 & 0 & 1/2 \\ 0 & 0 & 1/2 & 1/2 & 0 \end{bmatrix}}.$

There are 2 steady state vectors satisfying $P\mathbf{x} = \mathbf{x}:$ $\small{\begin{bmatrix} 1/2 \\ 1/2 \\ 0 \\ 0 \\ 0\end{bmatrix}}$ and $\small{\begin{bmatrix} 0 \\ 0 \\ 1/3 \\ 1/3 \\ 1/3\end{bmatrix}}$



:::

## PageRank Soln: Add Jumps

:::{style="font-size: .65em"}

The solution proposed by Page and Brin: introduce a small probability that a user randomly jumps to any page in the network, rather than following links.

__The Google Matrix__:

$$\small{G = \alpha P + (1-\alpha) \frac{1}{n} \mathbf{J}}$$

- $P$ is the original transition matrix
- $\alpha$ is the damping factor (typically $\alpha \approx 0.85$)
- $n$ is the number of states (websites)
- $\mathbf{J}$ is an $n \times n$ matrix of all ones

__Interpretation__:

- With probability $\alpha$, follow a link (use $P$)
- With probability $(1-\alpha)$, jump to a random page

:::

## PageRank Solution: Example

:::{style="font-size: .8em"}

Recall our problematic 5-website network with transition matrix:

$$\small{P = \begin{bmatrix} 0 & 1 & 0 & 0 & 0 \\ 1 & 0 & 0 & 0 & 0 \\ 0 & 0 & 0 & 1/2 & 1/2 \\0 & 0 & 1/2 & 0 & 1/2 \\ 0 & 0 & 1/2 & 1/2 & 0 \end{bmatrix}}$$

Using $\alpha = 0.99$ (1% chance of random jump):

$$\small{G = 0.99 P + 0.01 \cdot \frac{1}{5} \begin{bmatrix} 1 & 1 & 1 & 1 & 1 \\ 1 & 1 & 1 & 1 & 1 \\ 1 & 1 & 1 & 1 & 1 \\ 1 & 1 & 1 & 1 & 1 \\ 1 & 1 & 1 & 1 & 1 \end{bmatrix}}$$

:::

## PageRank Solution: The Google Matrix

:::{style="font-size: .8em"}

$$\small{G = \begin{bmatrix} 0.002 & 0.992 & 0.002 & 0.002 & 0.002 \\ 0.992 & 0.002 & 0.002 & 0.002 & 0.002 \\ 0.002 & 0.002 & 0.002 & 0.497 & 0.497 \\ 0.002 & 0.002 & 0.497 & 0.002 & 0.497 \\ 0.002 & 0.002 & 0.497 & 0.497 & 0.002 \end{bmatrix}}$$

__Key properties__:

- Every entry is strictly positive
- The matrix $G$ is primitive (hence the chain is regular!)
- Therefore, a unique steady-state distribution exists

:::

## PageRank Steady State

:::{style="font-size: .8em"}

The Google matrix $G$ has a unique steady-state vector:

$$\small{\boldsymbol{\pi} \approx \begin{bmatrix} 0.1603 \\ 0.1603 \\ 0.2265 \\ 0.2265 \\ 0.2265 \end{bmatrix}}$$

__Observations__:

- All pages now have non-zero PageRank
- Pages 3, 4, and 5 have higher ranks (more interconnected)
- The random jumps ensure regularity while preserving the link structure

:::

## Group Question 1
:::{style="font-size: .8em"}

:::{.center-text}
<img src="images/markov/mc-comm-period-question.jpg" width=450/>
:::

```{python}
from IPython.core.display import HTML

def generate_html():
    return r"""
    <div class="blue-box">
        <p>
    Consider the Markov chain illustrated above. All transitions out of a node are equally probable.<br>
    a. What states communicate with each other?
    <br>
    <br>
    b. Find the period of each state of this Markov chain.
    <br>
        </p>
    </div>
    """
html_content = generate_html()
display(HTML(html_content))
```
:::

:::{.notes}
a. (1,2), (3,4), (6,7,8)
b. 1+2: 1
3+4: 2
5: 1
6+7+8: 1
:::


## Group Question 2
:::{style="font-size: .8em"}


```{python}
from IPython.core.display import HTML

def generate_html():
    return r"""
    <div class="blue-box">
        <p>
    Consider a Markov chain with transition matrix given by
    \(\small{P = \begin{bmatrix}0 & 0.8 & 0.5\\ 0.3 & 0 & 0.5 \\ 0.7 & 0.2 & 0 \end{bmatrix}}.\) Show by means of a computation that the chain is regular.
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
    
        </p>
    </div>
    """
html_content = generate_html()
display(HTML(html_content))
```
:::

:::{.notes}
$$\small{P^2 = \begin{bmatrix}0.59 & 0.1 & 0.4\\ 0.35 & 0.34 & 0.15 \\ 0.06 & 0.056 & 0.45 \end{bmatrix}}$$

:::